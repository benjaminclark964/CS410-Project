-- Final Project -------------------------------------------------------------------------------------------------------

-- Create Table Statements
CREATE TABLE Class(class_id SERiAL PRIMARY KEY UNIQUE, course_number VARCHAR(20) NOT NULL,
 term VARCHAR(20) NOT NULL, section_number VARCHAR(20) NOT NULL, description TEXT);

CREATE TABLE Student(username VARCHAR(100) NOT NULL UNIQUE, student_id VARCHAR(9) PRIMARY KEY UNIQUE,
name VARCHAR(100) NOT NULL, class_id INTEGER REFERENCES class(class_id));

CREATE TABLE Items(id SERIAL PRIMARY KEY UNIQUE, itemname VARCHAR(100) NOT NULL UNIQUE, category_name VARCHAR(50) REFERENCES Categories(category_name),
description TEXT NOT NULL, point_value INTEGER NOT NULL);

CREATE TABLE Categories(id SERIAL PRIMARY KEY UNIQUE, category_name VARCHAR(50) NOT NULL UNIQUE, weight VARCHAR(5) NOT NULL);

CREATE TABLE Student_Graded_Items(itemname VARCHAR(50) REFERENCES items(itemname),
username VARCHAR(50) REFERENCES Student(username), points INTEGER, PRIMARY KEY(itemname, username));

-- Category INSERT Statements
INSERT INTO Categories(category_name, weight)
VALUES('midterm', '15%');

INSERT INTO Categories(category_name, weight)
VALUES('final', '25%');

INSERT INTO Categories(category_name, weight)
VALUES('project', '15%');

INSERT INTO Categories(category_name, weight)
VALUES('Quiz', '10%');

SELECT * FROM Categories;

-- Class INSERT Statements
INSERT INTO Class(course_number, term, section_number, description)
VALUES('CS410', 'SP20', '1', 'Databases');

INSERT INTO Class(course_number, term, section_number, description)
VALUES('CS510', 'SP20', '1', 'Databases for Graduates');

SELECT * FROM Class;

--Student INSERT Statements
INSERT INTO Student(username, student_id, name, class_id)
VALUES('larry123', '1', 'Wheels, Larry', 1);

INSERT INTO Student(username, student_id, name, class_id)
VALUES('sarah123', '2', 'Nera, Sarah', 2);

INSERT INTO Student(username, student_id, name, class_id)
VALUES('mary123', '3', 'Cary, Mary', 2);

INSERT INTO Student(username, student_id, name, class_id)
VALUES ('bEKSs123', 4, 'Barry, Bell', 2);

INSERT INTO Student(username, student_id, name, class_id)
VALUES ('bells123', 5, 'Barry, Beksll', 2);

SELECT * FROM Student;

--Item INSERT Statements
INSERT INTO Items(itemname, category_name, description, point_value)
VALUES('midterm 1', 'midterm', 'First midterm of semester', 100);

INSERT INTO Items(itemname, category_name, description, point_value)
VALUES('Grades Database', 'project', 'First project of the semester', 50);

INSERT INTO Items(itemname, category_name, description, point_value)
VALUES('project 2', 'project', 'Second Project of the semester', 50);

INSERT INTO Items(itemname, category_name, description, point_value)
VALUES('Quiz 2', 'Quiz', 'Second quiz of the semester',10);

SELECT * FROM Items;

--Student_Graded_Items INSERT statements
INSERT INTO Student_Graded_Items(itemname, username, points)
VALUES('Quiz 2', 'larry123', 8);

INSERT INTO Student_Graded_Items(itemname, username, points)
VALUES('midterm 1', 'larry123', 90);

SELECT * FROM Student_Graded_Items;

-------------------------------------------------------------------------------------
--Query Tests


--Class Management---------------------------------------------------------------

-- Create a class: new-class CS410 Sp20 1 "Databases"
INSERT INTO Class(course_number, term, section_number, description)
VALUES('CS410', 'SP20', '1', 'Databases');

-- List classes, with the # of students in each: list-classes
SELECT course_number as class, COUNT(Student.class_id) as num_students FROM Class
LEFT JOIN Student USING (class_id)
GROUP BY course_number, class_id;

-- select-class CS410 selects the only section of CS410 in the most recent
-- term, if there is only one such section; if there are multiple sections it fails.
SELECT * FROM Class
WHERE course_number='CS410' AND term='SP20';

-- select-class CS410 Sp20 selects the only section of CS410 in Spring 2020;
-- if there are multiple such sections, it fails.
SELECT * FROM Class
WHERE course_number='CS410' AND term='SP20';

-- select-class CS410 Sp20 1 selects a specific section
SELECT * FROM Class
WHERE course_number='CS410' AND term='SP20' AND section_number='1';

-- show-class shows the currently-active class
SELECT * FROM Class
WHERE term='SP20';

--Category and Item Management---------------------------------------------------------

-- show-categories – list the categories with their weights
SELECT * FROM Categories;

-- add-category "Name" weight – add a new category
INSERT INTO Categories(category_name, weight)
VALUES('Quiz', '10%');

-- show-items – list the items with their point values, grouped by category
SELECT itemname, point_value FROM Items
GROUP BY id, category_name;

-- add-item name "Category" "Description" points – add a new item
INSERT INTO Items(itemname, category_name, description, point_value)
VALUES('work', 'test', 'please work', 1 );

--Student Management----------------------------------------------------

--add-student username studentid "Last, First" — adds a student and
--enrolls them in the current class. If the student already exists, enroll them in the
--class; if the name provided does not match their stored name, update the name
--but print a warning that the name is being changed.

-- If Student does not exist, then enroll them in the current class and
-- add to the data base
INSERT INTO Student(username, student_id, name, class_id)
VALUES('Ben123', 4, 'Clark, Ben', 1);

-- If the student does already exist, then add them to the class
-- ? represents some username
UPDATE Student
SET class_id=1
WHERE username = ?;

--if the name provided does not match their stored name,
--update the name, and print a warning
UPDATE Student
SET username = ? AND name=?
WHERE student_id = ?;

-- add-student username — enrolls an already-existing student in the current
-- class. If the specified student does not exist, report an error.
UPDATE Student
SET class_id = ?
WHERE username = ?;

--show-students – show all students in the current class
SELECT * FROM Student
WHERE class_id = 2; --lets say class_id 2 is the current class

--show-students EKS – show all students with ‘EKS’ in their name or username
--(case-insensitive)
SELECT * FROM Student
WHERE LOWER(username) LIKE ANY
      (SELECT '%eks%' FROM Student
          WHERE 'eks' IS NOT NULL) OR
      LOWER(name) LIKE ANY
      (SELECT '%eks%' FROM Student
          WHERE 'eks' IS NOT NULL);


-- grade itemname username 20 – assign a grade of 20 for student with user
-- name ‘username’ for item ‘itemname’. If the student already has a grade for that
-- item, replace it. If the number of points exceeds the number of points configured
-- for the item, print a warning (showing the number of points configured).

-- If student does not have a grade for that item
INSERT INTO Student_Graded_Items(itemname, username, points)
VALUES('?', '?', '?');

-- If student does have a grade for that item, but needs to be updated
UPDATE Student_Graded_Items
SET points = '?'
WHERE itemname = '?' AND username='?';

--Grade Reporting--------------------------------------------------------------

-- student-grades username – show student’s current grade: all items, visually
-- grouped by category, with the student’s grade (if they have one). Show subtotals
-- for each category, along with the overall grade in the class.

SELECT Student_Graded_Items.itemname, Categories.category_name, username, points as grade, point_value
FROM student_graded_items
JOIN Items USING (itemname)
JOIN Categories USING (category_name)
WHERE username = 'larry123'
GROUP BY (Student_Graded_Items.itemname, username), point_value, Categories.category_name;

-- Current grade for class query
SELECT (student_points::float/total_points::float)*100 as student_grade FROM
                            (SELECT SUM(points) as student_points, SUM(point_value) as total_points FROM Student_Graded_Items
                            JOIN items i on Student_Graded_Items.itemname = i.itemname
                            WHERE username = 'larry123') as grade;

-- gradebook – show the current class’s gradebook: students (username, student
-- ID, and name), along with their total grades in the class
SELECT username, student_id, name, (SELECT (student_points::float/total_points::float)*100 as student_grade FROM
                            (SELECT SUM(points) as student_points, SUM(point_value) as total_points FROM Student_Graded_Items
                            JOIN items i on Student_Graded_Items.itemname = i.itemname
                            WHERE Student_Graded_Items.username = Student.username
                            GROUP BY username) as grade) current_grade  --This is its own column
FROM STUDENT
WHERE class_id = 2;

--grade of all students query
SELECT username, (student_points::float/total_points::float)*100 as student_grade FROM
                            (SELECT username, SUM(points) as student_points, SUM(point_value) as total_points FROM Student_Graded_Items
                            JOIN items i on Student_Graded_Items.itemname = i.itemname
                            WHERE username IS NOT NULL
                            GROUP BY username) as grade;